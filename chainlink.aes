payable contract Register =


    record chainee = {
        email : s,
        phone : i,
        jobSample : s,
        hired : int,
        ownerAddress : a,
        id : i,
        price : i,
        work : s,
        hours : i,
        company : s,
        name : s}

    record state = {
        chainees : map(i,chainee),
        userLength : i}
 
    entrypoint init() = {chainees = {}, userLength = 0}

    entrypoint userLength() = 
        state.userLength

    entrypoint getChaineeById(index : int)= 
        state.chainees[index]
        


    stateful entrypoint register(chainName:s, chainEmail :s, chainExpectedSalary :i, chainJobtype :s, chainWorkingHours : i, chainCompany : s, chainJobsample : s, chainPhone : i) = 
        let newChain = {
        
            email = chainEmail,
            price = chainExpectedSalary,
            hours = chainWorkingHours,
            jobSample = chainJobsample,
            hired = 0,
            name = chainName,
            phone = chainPhone,
            work = chainJobtype,
            company = chainCompany,
            id = userLength() + 1,
            ownerAddress = Call.caller}
        let index = userLength() +1

        put(state{chainees[index] = newChain, userLength = index})

        "New chainee Added to ChainLink"


    stateful payable entrypoint hireChainee(index : i) = 
        let employeeAddress = getChaineeById(index).ownerAddress
        require(Call.caller != employeeAddress, "Chain Error: You cannot Hire yourself;)")
        let toBeHired = getChaineeById(index)
        Chain.spend(toBeHired.ownerAddress, toBeHired.price)
        let hired = state.chainees[index].hired +1
        put(state{chainees[index].hired = hired })
        "Chainee was Hired successfully"
        

    type a = address
    type i = int
    type s = string